generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CREATOR
  REVISOR
  COLLABORATOR
  EDITOR
  VIEWER
  USER
}

model Role {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  role        UserRole
  permissions Permission[]
  User        User[]
}

model Setting {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  value      String?
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  userId     String?   @db.ObjectId
}

model Permission {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String
  Roles      Role?     @relation(fields: [rolesId], references: [id])
  rolesId    String?   @db.ObjectId
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  userId     String?   @db.ObjectId
}

model Group {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  level String
  users User[]
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  password   String
  group      Group?    @relation(fields: [groupId], references: [id])
  groupId    String?   @db.ObjectId
  tables     Table[]
  status     String?
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  reviews    Review[]
  rows       Row[]

  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String? @db.ObjectId
  Form   Form[]
}

model Table {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  identifier String
  rows       Row[]
  columns    Column[]
  config     Json?
  category   String?
  status     String?
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  owner      User?     @relation(fields: [ownerId], references: [id])
  ownerId    String?   @db.ObjectId
  Form       Form[]
}

model Column {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  identifier String?
  slug       String?
  type       String?
  data       Json?
  config     Json?
  status     String?
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  table      Table?    @relation(fields: [tableId], references: [id])
  tableId    String?   @db.ObjectId
}

model Row {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  value      Json?
  config     Json?
  created_by User?     @relation(fields: [userId], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  reviews    Review[]
  table      Table?    @relation(fields: [tableId], references: [id])
  tableId    String?   @db.ObjectId
  userId     String?   @db.ObjectId
}

model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  text       String?
  status     String?
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  created_by User?     @relation(fields: [userId], references: [id])
  row        Row?      @relation(fields: [rowId], references: [id])
  rowId      String?   @db.ObjectId
  userId     String?   @db.ObjectId
}

model Form {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String    @default("")
  table      Table     @relation(fields: [tableId], references: [id])
  tableId    String    @db.ObjectId
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  created_by User?   @relation(fields: [userId], references: [id])
  userId     String? @db.ObjectId

  published Boolean @default(false)

  description String @default("")

  visits      Int @default(0)
  submissions Int @default(0)

  shareUrl        String            @default(uuid())
  FormSubmissions FormSubmissions[]
}

model FormSubmissions {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  form       Form     @relation(fields: [formId], references: [id])
  formId     String   @db.ObjectId

  content String
}
